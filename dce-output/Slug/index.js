// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Slug = function (x) {
    return x;
};
var toString = function (v) {
    return v;
};
var generate = function (s) {
    var words = (function () {
        var $2960 = Data_Array.filter(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"]));
        var $2961 = Data_String_Common.split(" ");
        return function ($2962) {
            return $2960($2961($2962));
        };
    })();
    var stripApostrophes = Data_String_Common.replaceAll("'")("");
    var onlyAlphaNum = (function () {
        var $2963 = Data_Functor.map(Data_Functor.functorArray)(function (x) {
            var $2955 = Data_Char_Unicode.isAlphaNum(x) && Data_Char_Unicode.isLatin1(x);
            if ($2955) {
                return x;
            };
            return " ";
        });
        return function ($2964) {
            return Data_String_CodeUnits.fromCharArray($2963(Data_String_CodeUnits.toCharArray($2964)));
        };
    })();
    var arr = words(Data_String_Common.toLower(onlyAlphaNum(stripApostrophes(s))));
    var $2956 = Data_Array["null"](arr);
    if ($2956) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Maybe.Just.create(Slug(Data_String_Common.joinWith("-")(arr)));
};
var parse = function (str) {
    var check = function (v) {
        if (v === str) {
            return new Data_Maybe.Just(v);
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Slug (line 96, column 5 - line 98, column 28): " + [ v.constructor.name ]);
    };
    return Control_Bind.bind(Data_Maybe.bindMaybe)(generate(str))(check);
};
var eqSlug = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var decodeJsonSlug = new Data_Argonaut_Decode_Class.DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
    var $2965 = Data_Either.note("Failed to decode slug");
    return function ($2966) {
        return $2965(parse($2966));
    };
})())(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)));
module.exports = {
    generate: generate,
    parse: parse,
    toString: toString,
    eqSlug: eqSlug,
    decodeJsonSlug: decodeJsonSlug
};
