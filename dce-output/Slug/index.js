// Generated by purs version 0.13.6
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Argonaut_Decode_Class from "../Data.Argonaut.Decode.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Char_Unicode from "../Data.Char.Unicode/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
var Slug = function (x) {
    return x;
};
var toString = function (v) {
    return v;
};
var generate = function (s) {
    var words = (function () {
        var $2964 = Data_Array.filter(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_String_Common["null"]));
        var $2965 = Data_String_Common.split(" ");
        return function ($2966) {
            return $2964($2965($2966));
        };
    })();
    var stripApostrophes = Data_String_Common.replaceAll("'")("");
    var onlyAlphaNum = (function () {
        var $2967 = Data_Functor.map(Data_Functor.functorArray)(function (x) {
            var $2959 = Data_Char_Unicode.isAlphaNum(x) && Data_Char_Unicode.isLatin1(x);
            if ($2959) {
                return x;
            };
            return " ";
        });
        return function ($2968) {
            return Data_String_CodeUnits.fromCharArray($2967(Data_String_CodeUnits.toCharArray($2968)));
        };
    })();
    var arr = words(Data_String_Common.toLower(onlyAlphaNum(stripApostrophes(s))));
    var $2960 = Data_Array["null"](arr);
    if ($2960) {
        return Data_Maybe.Nothing.value;
    };
    return Data_Maybe.Just.create(Slug(Data_String_Common.joinWith("-")(arr)));
};
var parse = function (str) {
    var check = function (v) {
        if (v === str) {
            return new Data_Maybe.Just(v);
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Slug (line 96, column 5 - line 98, column 28): " + [ v.constructor.name ]);
    };
    return Control_Bind.bind(Data_Maybe.bindMaybe)(generate(str))(check);
};
var eqSlug = new Data_Eq.Eq(function (x) {
    return function (y) {
        return x === y;
    };
});
var decodeJsonSlug = new Data_Argonaut_Decode_Class.DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
    var $2969 = Data_Either.note("Failed to decode slug");
    return function ($2970) {
        return $2969(parse($2970));
    };
})())(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)));
export {
    generate,
    parse,
    toString,
    eqSlug,
    decodeJsonSlug
};
