// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var ReaderT = function (x) {
    return x;
};
var runReaderT = function (v) {
    return v;
};
var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function ($946) {
        return ReaderT(Data_Function["const"]($946));
    };
});
var mapReaderT = function (f) {
    return function (v) {
        return function ($947) {
            return f(v($947));
        };
    };
};
var functorReaderT = function (dictFunctor) {
    return new Data_Functor.Functor((function () {
        var $948 = Data_Functor.map(dictFunctor);
        return function ($949) {
            return mapReaderT($948($949));
        };
    })());
};
var applyReaderT = function (dictApply) {
    return new Control_Apply.Apply(function ($dollar__unused) {
        return functorReaderT(dictApply.Functor0());
    }, function (v) {
        return function (v1) {
            return function (r) {
                return Control_Apply.apply(dictApply)(v(r))(v1(r));
            };
        };
    });
};
var bindReaderT = function (dictBind) {
    return new Control_Bind.Bind(function ($dollar__unused) {
        return applyReaderT(dictBind.Apply0());
    }, function (v) {
        return function (k) {
            return function (r) {
                return Control_Bind.bind(dictBind)(v(r))(function (a) {
                    var v1 = k(a);
                    return v1(r);
                });
            };
        };
    });
};
var applicativeReaderT = function (dictApplicative) {
    return new Control_Applicative.Applicative(function ($dollar__unused) {
        return applyReaderT(dictApplicative.Apply0());
    }, (function () {
        var $950 = Control_Applicative.pure(dictApplicative);
        return function ($951) {
            return ReaderT(Data_Function["const"]($950($951)));
        };
    })());
};
var monadReaderT = function (dictMonad) {
    return new Control_Monad.Monad(function ($dollar__unused) {
        return applicativeReaderT(dictMonad.Applicative0());
    }, function ($dollar__unused) {
        return bindReaderT(dictMonad.Bind1());
    });
};
var monadAskReaderT = function (dictMonad) {
    return new Control_Monad_Reader_Class.MonadAsk(function ($dollar__unused) {
        return monadReaderT(dictMonad);
    }, Control_Applicative.pure(dictMonad.Applicative0()));
};
var monadEffectReader = function (dictMonadEffect) {
    return new Effect_Class.MonadEffect(function ($dollar__unused) {
        return monadReaderT(dictMonadEffect.Monad0());
    }, (function () {
        var $952 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
        var $953 = Effect_Class.liftEffect(dictMonadEffect);
        return function ($954) {
            return $952($953($954));
        };
    })());
};
module.exports = {
    ReaderT: ReaderT,
    runReaderT: runReaderT,
    mapReaderT: mapReaderT,
    functorReaderT: functorReaderT,
    applyReaderT: applyReaderT,
    applicativeReaderT: applicativeReaderT,
    bindReaderT: bindReaderT,
    monadReaderT: monadReaderT,
    monadTransReaderT: monadTransReaderT,
    monadEffectReader: monadEffectReader,
    monadAskReaderT: monadAskReaderT
};
