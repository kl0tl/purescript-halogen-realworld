// Generated by purs version 0.13.6
import * as Conduit_Capability_Navigate from "../Conduit.Capability.Navigate/index.js";
import * as Conduit_Capability_Resource_User from "../Conduit.Capability.Resource.User/index.js";
import * as Conduit_Component_HTML_Header from "../Conduit.Component.HTML.Header/index.js";
import * as Conduit_Component_HTML_Utils from "../Conduit.Component.HTML.Utils/index.js";
import * as Conduit_Data_Route from "../Conduit.Data.Route/index.js";
import * as Conduit_Form_Field from "../Conduit.Form.Field/index.js";
import * as Conduit_Form_Validation from "../Conduit.Form.Validation/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as DOM_HTML_Indexed_InputType from "../DOM.HTML.Indexed.InputType/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Formless_Class_Initial from "../Formless.Class.Initial/index.js";
import * as Formless_Component from "../Formless.Component/index.js";
import * as Formless_Internal_Transform from "../Formless.Internal.Transform/index.js";
import * as Formless_Query from "../Formless.Query/index.js";
import * as Formless_Transform_Record from "../Formless.Transform.Record/index.js";
import * as Formless_Transform_Row from "../Formless.Transform.Row/index.js";
import * as Formless_Types_Component from "../Formless.Types.Component/index.js";
import * as Formless_Types_Form from "../Formless.Types.Form/index.js";
import * as Formless_Validation from "../Formless.Validation/index.js";
import * as Halogen_Component from "../Halogen.Component/index.js";
import * as Halogen_HTML from "../Halogen.HTML/index.js";
import * as Halogen_HTML_Core from "../Halogen.HTML.Core/index.js";
import * as Halogen_HTML_Elements from "../Halogen.HTML.Elements/index.js";
import * as Halogen_HTML_Properties from "../Halogen.HTML.Properties/index.js";
import * as Halogen_Query_HalogenM from "../Halogen.Query.HalogenM/index.js";
import * as Heterogeneous_Mapping from "../Heterogeneous.Mapping/index.js";
var LoginForm = function (x) {
    return x;
};
var SetLoginError = (function () {
    function SetLoginError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SetLoginError.create = function (value0) {
        return function (value1) {
            return new SetLoginError(value0, value1);
        };
    };
    return SetLoginError;
})();
var HandleLoginForm = (function () {
    function HandleLoginForm(value0) {
        this.value0 = value0;
    };
    HandleLoginForm.create = function (value0) {
        return new HandleLoginForm(value0);
    };
    return HandleLoginForm;
})();
var newtypeLoginForm = new Data_Newtype.Newtype(function (n) {
    return n;
}, LoginForm);
var functorFormQuery = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new SetLoginError(m.value0, f(m.value1));
    };
});
var formComponent = function (dictMonadAff) {
    var proxies = Formless_Transform_Row.mkSProxies()(newtypeLoginForm)(Formless_Transform_Row.makeSProxiesCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Transform_Row.makeSProxiesCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Transform_Row.makeSProxiesNil)))(Formless_Types_Form.FormProxy.value);
    var renderLogin = function (v) {
        return Halogen_HTML_Elements.form_([ Conduit_Component_HTML_Utils.whenElem(v.loginError)(function (v1) {
            return Halogen_HTML_Elements.div([ Conduit_Component_HTML_Utils.css("error-messages") ])([ Halogen_HTML_Core.text("Email or password is invalid") ]);
        }), Halogen_HTML_Elements.fieldset_([ Conduit_Form_Field.input(new Data_Symbol.IsSymbol(function ($dollar__unused) {
            return "email";
        }))(newtypeLoginForm)(newtypeLoginForm)()()(proxies.email)(v.form)([ Halogen_HTML_Properties.placeholder("Email"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputEmail.value) ]), Conduit_Form_Field.input(new Data_Symbol.IsSymbol(function ($dollar__unused) {
            return "password";
        }))(newtypeLoginForm)(newtypeLoginForm)()()(proxies.password)(v.form)([ Halogen_HTML_Properties.placeholder("Password"), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputPassword.value) ]), Conduit_Form_Field.submit("Log in") ]) ]);
    };
    var handleQuery = function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify_(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
            var $625 = {};
            for (var $626 in v1) {
                if ({}.hasOwnProperty.call(v1, $626)) {
                    $625[$626] = v1[$626];
                };
            };
            $625.loginError = v.value0;
            return $625;
        }))(function ($dollar__unused) {
            return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
        });
    };
    var formInput = function (v) {
        return {
            validators: {
                email: Control_Semigroupoid.composeFlipped(Formless_Validation.semigroupoidValidation((dictMonadAff.MonadEffect0()).Monad0()))(Conduit_Form_Validation.required(Data_Eq.eqString)(Data_Monoid.monoidString)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Semigroupoid.composeFlipped(Formless_Validation.semigroupoidValidation((dictMonadAff.MonadEffect0()).Monad0()))(Conduit_Form_Validation.minLength((dictMonadAff.MonadEffect0()).Monad0())(3))(Conduit_Form_Validation.emailFormat((dictMonadAff.MonadEffect0()).Monad0()))),
                password: Control_Semigroupoid.composeFlipped(Formless_Validation.semigroupoidValidation((dictMonadAff.MonadEffect0()).Monad0()))(Conduit_Form_Validation.required(Data_Eq.eqString)(Data_Monoid.monoidString)((dictMonadAff.MonadEffect0()).Monad0()))(Control_Semigroupoid.composeFlipped(Formless_Validation.semigroupoidValidation((dictMonadAff.MonadEffect0()).Monad0()))(Conduit_Form_Validation.minLength((dictMonadAff.MonadEffect0()).Monad0())(2))(Conduit_Form_Validation.maxLength((dictMonadAff.MonadEffect0()).Monad0())(20)))
            },
            initialInputs: Data_Maybe.Nothing.value,
            loginError: false
        };
    };
    return Formless_Component.component(dictMonadAff)()()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))(Formless_Types_Form.eqInputField(Data_Eq.eqString)))()(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))(Formless_Types_Form.eqInputField(Data_Eq.eqString)))(Formless_Internal_Transform.inputFieldsToFormFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.inputFieldsToFormFieldsCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.inputFieldsToFormFieldsNil)())())(Formless_Internal_Transform.inputFieldsToInputCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.inputFieldsToInputCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.inputFieldsToInputNil)())())(Formless_Internal_Transform.consCountErrors(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.consCountErrors(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.nilCountErrors)))(Formless_Internal_Transform.consAllTouched(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.consAllTouched(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.nilAllTouched)))(Formless_Internal_Transform.setFormFieldsTouchedCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.setFormFieldsTouchedCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.setFormFieldsTouchedNil)())())(Formless_Internal_Transform.replaceFormFieldInputsTouchedCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))(Formless_Types_Form.newtypeInputField)(Formless_Types_Form.newtypeFormField)()()()(Formless_Internal_Transform.replaceFormFieldInputsTouchedCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))(Formless_Types_Form.newtypeInputField)(Formless_Types_Form.newtypeFormField)()()()(Formless_Internal_Transform.replaceFormFieldInputsTouchedNil)))(Formless_Internal_Transform.modifyAllCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))(Formless_Types_Form.newtypeInputFunction)(Formless_Types_Form.newtypeFormField)()()()(Formless_Internal_Transform.modifyAllCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))(Formless_Types_Form.newtypeInputFunction)(Formless_Types_Form.newtypeFormField)()()()(Formless_Internal_Transform.modifyAllNil)))(Formless_Internal_Transform.applyToValidationCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))((dictMonadAff.MonadEffect0()).Monad0())()(newtypeLoginForm)()()(Formless_Internal_Transform.applyToValidationCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))((dictMonadAff.MonadEffect0()).Monad0())()(newtypeLoginForm)()()(Formless_Internal_Transform.applyToValidationNil((dictMonadAff.MonadEffect0()).Monad0()))))(Formless_Internal_Transform.formFieldsToMaybeOutputCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))()(Formless_Internal_Transform.formFieldsToMaybeOutputCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))()(Formless_Internal_Transform.formFieldsToMaybeOutputNil)())())(Formless_Transform_Row.mkInputFieldsFromRowCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "email";
    }))(Formless_Class_Initial.initialString)()(Formless_Transform_Row.mkInputFieldsFromRowCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
        return "password";
    }))(Formless_Class_Initial.initialString)()(Formless_Transform_Row.mkInputFieldsFromRowNil)())())(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)(newtypeLoginForm)()()()()()()()()()(formInput)({
        render: renderLogin,
        handleAction: Formless_Component.defaultSpec.handleAction,
        handleQuery: handleQuery,
        handleEvent: Formless_Component.raiseResult(newtypeLoginForm)(Heterogeneous_Mapping.hmapRecord()(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
            return "email";
        }))(Heterogeneous_Mapping.constMapping(Formless_Transform_Record.unwrapField(Formless_Types_Form.newtypeOutputField)))(Heterogeneous_Mapping.mapRecordWithIndexCons(new Data_Symbol.IsSymbol(function ($dollar__unused) {
            return "password";
        }))(Heterogeneous_Mapping.constMapping(Formless_Transform_Record.unwrapField(Formless_Types_Form.newtypeOutputField)))(Heterogeneous_Mapping.mapRecordWithIndexNil)()())()())),
        receive: Formless_Component.defaultSpec.receive,
        initialize: Formless_Component.defaultSpec.initialize,
        finalize: Formless_Component.defaultSpec.finalize
    });
};
var component = function (dictMonadAff) {
    return function (dictNavigate) {
        return function (dictManageUser) {
            var render = function (v) {
                var container = function (html) {
                    return Halogen_HTML_Elements.div([ Conduit_Component_HTML_Utils.css("auth-page") ])([ Conduit_Component_HTML_Header.header(Data_Maybe.Nothing.value)(Conduit_Data_Route.Login.value), Halogen_HTML_Elements.div([ Conduit_Component_HTML_Utils.css("container page") ])([ Halogen_HTML_Elements.div([ Conduit_Component_HTML_Utils.css("row") ])([ Halogen_HTML_Elements.div([ Conduit_Component_HTML_Utils.css("col-md-6 offset-md-3 col-xs12") ])(html) ]) ]) ]);
                };
                return container([ Halogen_HTML_Elements.h1([ Conduit_Component_HTML_Utils.css("text-xs-center") ])([ Halogen_HTML_Core.text("Sign In") ]), Halogen_HTML_Elements.p([ Conduit_Component_HTML_Utils.css("text-xs-center") ])([ Halogen_HTML_Elements.a([ Conduit_Component_HTML_Utils.safeHref(Conduit_Data_Route.Register.value) ])([ Halogen_HTML_Core.text("Need an account?") ]) ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                    return "formless";
                }))(Data_Ord.ordUnit)(Formless_Types_Component["_formless"])(Data_Unit.unit)(formComponent(dictMonadAff))(Data_Unit.unit)(function ($634) {
                    return Data_Maybe.Just.create(HandleLoginForm.create($634));
                }) ]);
            };
            var handleAction = function (v) {
                return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Conduit_Capability_Resource_User.loginUser(Conduit_Capability_Resource_User.manageUserHalogenM(dictManageUser))(v.value0))(function (v1) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                            return "formless";
                        }))(Data_Ord.ordUnit)(Formless_Types_Component["_formless"])(Data_Unit.unit)(Formless_Query.injQuery(functorFormQuery)(new SetLoginError(true, Data_Unit.unit))));
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Data_Functor["void"](Halogen_Query_HalogenM.functorHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function ($dollar__unused) {
                            return "formless";
                        }))(Data_Ord.ordUnit)(Formless_Types_Component["_formless"])(Data_Unit.unit)(Formless_Query.injQuery(functorFormQuery)(new SetLoginError(false, Data_Unit.unit)))))(function ($dollar__unused) {
                            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (st) {
                                return Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(st.redirect)(Conduit_Capability_Navigate.navigate(Conduit_Capability_Navigate.navigateHalogenM(dictNavigate))(Conduit_Data_Route.Home.value));
                            });
                        });
                    };
                    throw new Error("Failed pattern match at Conduit.Page.Login (line 56, column 28 - line 62, column 43): " + [ v1.constructor.name ]);
                });
            };
            return Halogen_Component.mkComponent({
                initialState: Control_Category.identity(Control_Category.categoryFn),
                render: render,
                "eval": Halogen_Component.mkEval({
                    handleAction: handleAction,
                    handleQuery: Halogen_Component.defaultEval.handleQuery,
                    receive: Halogen_Component.defaultEval.receive,
                    initialize: Halogen_Component.defaultEval.initialize,
                    finalize: Halogen_Component.defaultEval.finalize
                })
            });
        };
    };
};
export {
    HandleLoginForm,
    component,
    LoginForm,
    SetLoginError,
    formComponent,
    newtypeLoginForm,
    functorFormQuery
};
