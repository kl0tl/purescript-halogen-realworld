// Generated by purs version 0.13.6
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Record from "../Record/index.js";
import * as Routing_Duplex_Parser from "../Routing.Duplex.Parser/index.js";
import * as Routing_Duplex_Printer from "../Routing.Duplex.Printer/index.js";
import * as Type_Data_RowList from "../Type.Data.RowList/index.js";
var RouteDuplex = (function () {
    function RouteDuplex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RouteDuplex.create = function (value0) {
        return function (value1) {
            return new RouteDuplex(value0, value1);
        };
    };
    return RouteDuplex;
})();
var RouteDuplexParams = function (params) {
    this.params = params;
};
var RouteDuplexBuildParams = function (buildParams) {
    this.buildParams = buildParams;
};
var suffix = function (v) {
    return function (s) {
        return new RouteDuplex(function (a) {
            return Data_Semigroup.append(Routing_Duplex_Printer.semigroupRoutePrinter)(v.value0(a))(Routing_Duplex_Printer.put(s));
        }, Control_Apply.applyFirst(Routing_Duplex_Parser.applyRouteParser)(v.value1)(Routing_Duplex_Parser.prefix(s)(Control_Applicative.pure(Routing_Duplex_Parser.applicativeRouteParser)(Data_Unit.unit))));
    };
};
var string = Control_Category.identity(Control_Category.categoryFn);
var segment = new RouteDuplex(Routing_Duplex_Printer.put, Routing_Duplex_Parser.take);
var record = new RouteDuplex(Data_Monoid.mempty(Data_Monoid.monoidFn(Routing_Duplex_Printer.monoidRoutePRinter)), Control_Applicative.pure(Routing_Duplex_Parser.applicativeRouteParser)({}));
var prop = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictLacks) {
                return function (sym) {
                    return function (v) {
                        return function (v1) {
                            return new RouteDuplex(function (r) {
                                return Data_Semigroup.append(Routing_Duplex_Printer.semigroupRoutePrinter)(v1.value0(r))(v.value0(Record.get(dictIsSymbol)()(sym)(r)));
                            }, Control_Apply.apply(Routing_Duplex_Parser.applyRouteParser)(Data_Functor.map(Routing_Duplex_Parser.functorRouteParser)(Data_Function.flip(Record.insert(dictIsSymbol)()()(sym)))(v1.value1))(v.value1));
                        };
                    };
                };
            };
        };
    };
};
var profunctorRouteDuplex = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return new RouteDuplex(function ($2757) {
                return v.value0(f($2757));
            }, Data_Functor.map(Routing_Duplex_Parser.functorRouteParser)(g)(v.value1));
        };
    };
});
var print = function (v) {
    return function ($2758) {
        return Routing_Duplex_Printer.run(v.value0($2758));
    };
};
var prefix = function (s) {
    return function (v) {
        return new RouteDuplex(function (a) {
            return Data_Semigroup.append(Routing_Duplex_Printer.semigroupRoutePrinter)(Routing_Duplex_Printer.put(s))(v.value0(a));
        }, Routing_Duplex_Parser.prefix(s)(v.value1));
    };
};
var path = (function () {
    var $2759 = Data_Function.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)(prefix));
    var $2760 = Data_String_Common.split("/");
    return function ($2761) {
        return $2759($2760($2761));
    };
})();
var root = path("");
var parse = function (v) {
    return Routing_Duplex_Parser.run(v.value1);
};
var params = function (dict) {
    return dict.params;
};
var param = function (p) {
    return new RouteDuplex(Routing_Duplex_Printer.param(p), Routing_Duplex_Parser.param(p));
};
var optional = function (v) {
    return new RouteDuplex(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Routing_Duplex_Printer.monoidRoutePRinter)(v.value0), Routing_Duplex_Parser.optional(v.value1));
};
var functorRouteDuplex = new Data_Functor.Functor(function (f) {
    return function (m) {
        return new RouteDuplex(m.value0, Data_Functor.map(Routing_Duplex_Parser.functorRouteParser)(f)(m.value1));
    };
});
var end = function (v) {
    return new RouteDuplex(v.value0, Control_Apply.applyFirst(Routing_Duplex_Parser.applyRouteParser)(v.value1)(Routing_Duplex_Parser.end));
};
var buildParamsNil = new RouteDuplexBuildParams(function (v) {
    return function (r) {
        return Control_Category.identity(Control_Category.categoryFn);
    };
});
var buildParams = function (dict) {
    return dict.buildParams;
};
var buildParamsCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictCons2) {
                return function (dictLacks) {
                    return function (dictRouteDuplexBuildParams) {
                        return new RouteDuplexBuildParams(function (v) {
                            return function (r) {
                                return function (prev) {
                                    return buildParams(dictRouteDuplexBuildParams)(Type_Data_RowList.RLProxy.value)(r)(prop(dictIsSymbol)()()()(Data_Symbol.SProxy.value)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r)(param(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))))(prev));
                                };
                            };
                        });
                    };
                };
            };
        };
    };
};
var routeDuplexParams = function (dictRowToList) {
    return function (dictRouteDuplexBuildParams) {
        return new RouteDuplexParams(function (r) {
            return buildParams(dictRouteDuplexBuildParams)(Type_Data_RowList.RLProxy.value)(r)(record);
        });
    };
};
var as = function (f) {
    return function (g) {
        return function (v) {
            return new RouteDuplex(function ($2762) {
                return v.value0(f($2762));
            }, Routing_Duplex_Parser.as(Control_Category.identity(Control_Category.categoryFn))(g)(v.value1));
        };
    };
};
var $$int = as(Data_Show.show(Data_Show.showInt))(Routing_Duplex_Parser["int"]);
var applyRouteDuplex = new Control_Apply.Apply(function ($dollar__unused) {
    return functorRouteDuplex;
}, function (v) {
    return function (v1) {
        return new RouteDuplex(Control_Apply.apply(Control_Apply.applyFn)(Data_Functor.map(Data_Functor.functorFn)(Data_Semigroup.append(Routing_Duplex_Printer.semigroupRoutePrinter))(v.value0))(v1.value0), Control_Apply.apply(Routing_Duplex_Parser.applyRouteParser)(v.value1)(v1.value1));
    };
});
var applicativeRouteDuplex = new Control_Applicative.Applicative(function ($dollar__unused) {
    return applyRouteDuplex;
}, (function () {
    var $2763 = RouteDuplex.create(Data_Function["const"](Data_Monoid.mempty(Routing_Duplex_Printer.monoidRoutePRinter)));
    var $2764 = Control_Applicative.pure(Routing_Duplex_Parser.applicativeRouteParser);
    return function ($2765) {
        return $2763($2764($2765));
    };
})());
export {
    RouteDuplex,
    parse,
    print,
    prefix,
    suffix,
    path,
    root,
    end,
    segment,
    param,
    optional,
    as,
    $$int as int,
    string,
    record,
    prop,
    params,
    buildParams,
    RouteDuplexParams,
    RouteDuplexBuildParams,
    functorRouteDuplex,
    applyRouteDuplex,
    applicativeRouteDuplex,
    profunctorRouteDuplex,
    routeDuplexParams,
    buildParamsCons,
    buildParamsNil
};
