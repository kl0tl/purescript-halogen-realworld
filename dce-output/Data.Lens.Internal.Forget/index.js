// Generated by purs version 0.13.6
import * as Data_Const from "../Data.Const/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Lens_Internal_Wander from "../Data.Lens.Internal.Wander/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Profunctor_Choice from "../Data.Profunctor.Choice/index.js";
import * as Data_Profunctor_Strong from "../Data.Profunctor.Strong/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var Forget = function (x) {
    return x;
};
var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
    return function (v) {
        return function (v1) {
            return function ($1300) {
                return v1(f($1300));
            };
        };
    };
});
var strongForget = new Data_Profunctor_Strong.Strong(function ($dollar__unused) {
    return profunctorForget;
}, function (v) {
    return function ($1301) {
        return v(Data_Tuple.fst($1301));
    };
}, function (v) {
    return function ($1302) {
        return v(Data_Tuple.snd($1302));
    };
});
var newtypeForget = new Data_Newtype.Newtype(function (n) {
    return n;
}, Forget);
var choiceForget = function (dictMonoid) {
    return new Data_Profunctor_Choice.Choice(function ($dollar__unused) {
        return profunctorForget;
    }, function (v) {
        return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
    }, function (v) {
        return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
    });
};
var wanderForget = function (dictMonoid) {
    return new Data_Lens_Internal_Wander.Wander(function ($dollar__unused) {
        return choiceForget(dictMonoid);
    }, function ($dollar__unused) {
        return strongForget;
    }, function (f) {
        return function (v) {
            return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
        };
    });
};
export {
    Forget,
    newtypeForget,
    profunctorForget,
    choiceForget,
    strongForget,
    wanderForget
};
