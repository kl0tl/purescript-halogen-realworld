// Generated by purs version 0.13.8
"use strict";
var Data_Const = require("../Data.Const/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Forget = function (x) {
    return x;
};
var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
    return function (v) {
        return function (v1) {
            return function ($1298) {
                return v1(f($1298));
            };
        };
    };
});
var strongForget = new Data_Profunctor_Strong.Strong(function ($dollar__unused) {
    return profunctorForget;
}, function (v) {
    return function ($1299) {
        return v(Data_Tuple.fst($1299));
    };
}, function (v) {
    return function ($1300) {
        return v(Data_Tuple.snd($1300));
    };
});
var newtypeForget = new Data_Newtype.Newtype(function (n) {
    return n;
}, Forget);
var choiceForget = function (dictMonoid) {
    return new Data_Profunctor_Choice.Choice(function ($dollar__unused) {
        return profunctorForget;
    }, function (v) {
        return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
    }, function (v) {
        return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
    });
};
var wanderForget = function (dictMonoid) {
    return new Data_Lens_Internal_Wander.Wander(function ($dollar__unused) {
        return choiceForget(dictMonoid);
    }, function ($dollar__unused) {
        return strongForget;
    }, function (f) {
        return function (v) {
            return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
        };
    });
};
module.exports = {
    Forget: Forget,
    newtypeForget: newtypeForget,
    profunctorForget: profunctorForget,
    choiceForget: choiceForget,
    strongForget: strongForget,
    wanderForget: wanderForget
};
