// Generated by purs version 0.13.8
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Struct_Tolerant_GDecodeJson = require("../Data.Argonaut.Decode.Struct.Tolerant.GDecodeJson/index.js");
var Data_Argonaut_Decode_Struct_Utils = require("../Data.Argonaut.Decode.Struct.Utils/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Operator_Bottom = require("../Data.Operator.Bottom/index.js");
var Data_Operator_Top = require("../Data.Operator.Top/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var DecodeJson = function (decodeJson) {
    this.decodeJson = decodeJson;
};
var decodeJsonRecord = function (dictGDecodeJson) {
    return function (dictRowToList) {
        return new DecodeJson(function (json) {
            var v = Data_Argonaut_Core.toObject(json);
            if (v instanceof Data_Maybe.Just) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Struct_Tolerant_GDecodeJson.gDecodeJson(dictGDecodeJson)(Type_Data_RowList.RLProxy.value)(Type_Data_RowList.RLProxy.value)(v.value0))(function (builder) {
                    return Data_Operator_Top.top1_(Data_Operator_Top.top1_Either)(Record_Builder.build(builder)({}));
                });
            };
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Operator_Bottom.bottom2(Data_Operator_Bottom.bottom2Either)(Data_Argonaut_Decode_Struct_Utils.notObjectErrorMessage);
            };
            throw new Error("Failed pattern match at Data.Argonaut.Decode.Struct.Tolerant.DecodeJson (line 32, column 5 - line 41, column 38): " + [ v.constructor.name ]);
        });
    };
};
var decodeJson = function (dict) {
    return dict.decodeJson;
};
var decodeDecodeJson = function (dictDecodeJson) {
    return new DecodeJson(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
};
module.exports = {
    DecodeJson: DecodeJson,
    decodeJson: decodeJson,
    decodeJsonRecord: decodeJsonRecord,
    decodeDecodeJson: decodeDecodeJson
};
