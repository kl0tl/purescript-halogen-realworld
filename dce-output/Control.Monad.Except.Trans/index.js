// Generated by purs version 0.13.6
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad from "../Control.Monad/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
var ExceptT = function (x) {
    return x;
};
var runExceptT = function (v) {
    return v;
};
var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
    return function (m) {
        return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
        });
    };
});
var mapExceptT = function (f) {
    return function (v) {
        return f(v);
    };
};
var functorExceptT = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
    });
};
var monadExceptT = function (dictMonad) {
    return new Control_Monad.Monad(function ($dollar__unused) {
        return applicativeExceptT(dictMonad);
    }, function ($dollar__unused) {
        return bindExceptT(dictMonad);
    });
};
var bindExceptT = function (dictMonad) {
    return new Control_Bind.Bind(function ($dollar__unused) {
        return applyExceptT(dictMonad);
    }, function (v) {
        return function (k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                var $847 = Control_Applicative.pure(dictMonad.Applicative0());
                return function ($848) {
                    return $847(Data_Either.Left.create($848));
                };
            })())(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    });
};
var applyExceptT = function (dictMonad) {
    return new Control_Apply.Apply(function ($dollar__unused) {
        return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
    }, Control_Monad.ap(monadExceptT(dictMonad)));
};
var applicativeExceptT = function (dictMonad) {
    return new Control_Applicative.Applicative(function ($dollar__unused) {
        return applyExceptT(dictMonad);
    }, (function () {
        var $849 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($850) {
            return ExceptT($849(Data_Either.Right.create($850)));
        };
    })());
};
var monadStateExceptT = function (dictMonadState) {
    return new Control_Monad_State_Class.MonadState(function ($dollar__unused) {
        return monadExceptT(dictMonadState.Monad0());
    }, function (f) {
        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
    });
};
var monadThrowExceptT = function (dictMonad) {
    return new Control_Monad_Error_Class.MonadThrow(function ($dollar__unused) {
        return monadExceptT(dictMonad);
    }, (function () {
        var $851 = Control_Applicative.pure(dictMonad.Applicative0());
        return function ($852) {
            return ExceptT($851(Data_Either.Left.create($852)));
        };
    })());
};
export {
    ExceptT,
    runExceptT,
    mapExceptT,
    functorExceptT,
    applyExceptT,
    applicativeExceptT,
    bindExceptT,
    monadExceptT,
    monadTransExceptT,
    monadThrowExceptT,
    monadStateExceptT
};
