// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Second = function (x) {
    return x;
};
var Minute = function (x) {
    return x;
};
var Millisecond = function (x) {
    return x;
};
var Hour = function (x) {
    return x;
};
var ordSecond = Data_Ord.ordInt;
var ordMinute = Data_Ord.ordInt;
var ordMillisecond = Data_Ord.ordInt;
var ordHour = Data_Ord.ordInt;
var boundedSecond = new Data_Bounded.Bounded(function ($dollar__unused) {
    return ordSecond;
}, 0, 59);
var boundedMinute = new Data_Bounded.Bounded(function ($dollar__unused) {
    return ordMinute;
}, 0, 59);
var boundedMillisecond = new Data_Bounded.Bounded(function ($dollar__unused) {
    return ordMillisecond;
}, 0, 999);
var boundedHour = new Data_Bounded.Bounded(function ($dollar__unused) {
    return ordHour;
}, 0, 23);
var boundedEnumSecond = new Data_Enum.BoundedEnum(function ($dollar__unused) {
    return boundedSecond;
}, function ($dollar__unused) {
    return enumSecond;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [ n.constructor.name ]);
});
var enumSecond = new Data_Enum.Enum(function ($dollar__unused) {
    return ordSecond;
}, (function () {
    var $1890 = Data_Enum.toEnum(boundedEnumSecond);
    var $1891 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($1892) {
        return $1890((function (v) {
            return v - 1 | 0;
        })($1891($1892)));
    };
})(), (function () {
    var $1893 = Data_Enum.toEnum(boundedEnumSecond);
    var $1894 = Data_Enum.fromEnum(boundedEnumSecond);
    return function ($1895) {
        return $1893((function (v) {
            return v + 1 | 0;
        })($1894($1895)));
    };
})());
var boundedEnumMinute = new Data_Enum.BoundedEnum(function ($dollar__unused) {
    return boundedMinute;
}, function ($dollar__unused) {
    return enumMinute;
}, 60, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 59) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [ n.constructor.name ]);
});
var enumMinute = new Data_Enum.Enum(function ($dollar__unused) {
    return ordMinute;
}, (function () {
    var $1896 = Data_Enum.toEnum(boundedEnumMinute);
    var $1897 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($1898) {
        return $1896((function (v) {
            return v - 1 | 0;
        })($1897($1898)));
    };
})(), (function () {
    var $1899 = Data_Enum.toEnum(boundedEnumMinute);
    var $1900 = Data_Enum.fromEnum(boundedEnumMinute);
    return function ($1901) {
        return $1899((function (v) {
            return v + 1 | 0;
        })($1900($1901)));
    };
})());
var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function ($dollar__unused) {
    return boundedMillisecond;
}, function ($dollar__unused) {
    return enumMillisecond;
}, 1000, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 999) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [ n.constructor.name ]);
});
var enumMillisecond = new Data_Enum.Enum(function ($dollar__unused) {
    return ordMillisecond;
}, (function () {
    var $1902 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $1903 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($1904) {
        return $1902((function (v) {
            return v - 1 | 0;
        })($1903($1904)));
    };
})(), (function () {
    var $1905 = Data_Enum.toEnum(boundedEnumMillisecond);
    var $1906 = Data_Enum.fromEnum(boundedEnumMillisecond);
    return function ($1907) {
        return $1905((function (v) {
            return v + 1 | 0;
        })($1906($1907)));
    };
})());
var boundedEnumHour = new Data_Enum.BoundedEnum(function ($dollar__unused) {
    return boundedHour;
}, function ($dollar__unused) {
    return enumHour;
}, 24, function (v) {
    return v;
}, function (n) {
    if (n >= 0 && n <= 23) {
        return new Data_Maybe.Just(n);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [ n.constructor.name ]);
});
var enumHour = new Data_Enum.Enum(function ($dollar__unused) {
    return ordHour;
}, (function () {
    var $1908 = Data_Enum.toEnum(boundedEnumHour);
    var $1909 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($1910) {
        return $1908((function (v) {
            return v - 1 | 0;
        })($1909($1910)));
    };
})(), (function () {
    var $1911 = Data_Enum.toEnum(boundedEnumHour);
    var $1912 = Data_Enum.fromEnum(boundedEnumHour);
    return function ($1913) {
        return $1911((function (v) {
            return v + 1 | 0;
        })($1912($1913)));
    };
})());
module.exports = {
    ordHour: ordHour,
    boundedHour: boundedHour,
    enumHour: enumHour,
    boundedEnumHour: boundedEnumHour,
    ordMinute: ordMinute,
    boundedMinute: boundedMinute,
    enumMinute: enumMinute,
    boundedEnumMinute: boundedEnumMinute,
    ordSecond: ordSecond,
    boundedSecond: boundedSecond,
    enumSecond: enumSecond,
    boundedEnumSecond: boundedEnumSecond,
    ordMillisecond: ordMillisecond,
    boundedMillisecond: boundedMillisecond,
    enumMillisecond: enumMillisecond,
    boundedEnumMillisecond: boundedEnumMillisecond
};
