// Generated by purs version 0.13.6
import * as Conduit_Data_Avatar from "../Conduit.Data.Avatar/index.js";
import * as Conduit_Data_Email from "../Conduit.Data.Email/index.js";
import * as Conduit_Data_Username from "../Conduit.Data.Username/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Formless_Validation from "../Formless.Validation/index.js";
var Required = (function () {
    function Required() {

    };
    Required.value = new Required();
    return Required;
})();
var TooShort = (function () {
    function TooShort() {

    };
    TooShort.value = new TooShort();
    return TooShort;
})();
var TooLong = (function () {
    function TooLong() {

    };
    TooLong.value = new TooLong();
    return TooLong;
})();
var InvalidEmail = (function () {
    function InvalidEmail() {

    };
    InvalidEmail.value = new InvalidEmail();
    return InvalidEmail;
})();
var InvalidUsername = (function () {
    function InvalidUsername() {

    };
    InvalidUsername.value = new InvalidUsername();
    return InvalidUsername;
})();
var InvalidAvatar = (function () {
    function InvalidAvatar() {

    };
    InvalidAvatar.value = new InvalidAvatar();
    return InvalidAvatar;
})();
var usernameFormat = function (dictMonad) {
    return Formless_Validation.hoistFnE_(dictMonad)((function () {
        var $494 = Data_Either.note(InvalidUsername.value);
        return function ($495) {
            return $494(Conduit_Data_Username.parse($495));
        };
    })());
};
var toOptional = function (dictMonoid) {
    return function (dictEq) {
        return function (dictMonad) {
            return function (v) {
                return function (form) {
                    return function (val) {
                        var v1 = Data_Eq.eq(dictEq)(val)(Data_Monoid.mempty(dictMonoid));
                        if (v1) {
                            return Control_Applicative.pure(dictMonad.Applicative0())(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value));
                        };
                        return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create))(Formless_Validation.runValidation(dictMonad)(v)(form)(val));
                    };
                };
            };
        };
    };
};
var errorToString = function (v) {
    if (v instanceof Required) {
        return "This field is required.";
    };
    if (v instanceof TooShort) {
        return "Not enough characters entered";
    };
    if (v instanceof TooLong) {
        return "Too many characters entered";
    };
    if (v instanceof InvalidEmail) {
        return "Invalid email address";
    };
    if (v instanceof InvalidUsername) {
        return "Invalid username";
    };
    if (v instanceof InvalidAvatar) {
        return "Invalid image URL";
    };
    throw new Error("Failed pattern match at Conduit.Form.Validation (line 39, column 17 - line 45, column 39): " + [ v.constructor.name ]);
};
var cond = function (f) {
    return function (err) {
        return function (a) {
            var $493 = f(a);
            if ($493) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(a);
            };
            return new Data_Either.Left(err);
        };
    };
};
var emailFormat = function (dictMonad) {
    return Formless_Validation.hoistFnE_(dictMonad)((function () {
        var $496 = Data_Functor.map(Data_Either.functorEither)(Conduit_Data_Email.Email);
        var $497 = cond(Data_String_CodeUnits.contains("@"))(InvalidEmail.value);
        return function ($498) {
            return $496($497($498));
        };
    })());
};
var maxLength = function (dictMonad) {
    return function (n) {
        return Formless_Validation.hoistFnE_(dictMonad)(cond(function (str) {
            return Data_String_CodePoints.length(str) <= n;
        })(TooLong.value));
    };
};
var minLength = function (dictMonad) {
    return function (n) {
        return Formless_Validation.hoistFnE_(dictMonad)(cond(function (str) {
            return Data_String_CodePoints.length(str) > n;
        })(TooShort.value));
    };
};
var required = function (dictEq) {
    return function (dictMonoid) {
        return function (dictMonad) {
            return Formless_Validation.hoistFnE_(dictMonad)(cond(function (v) {
                return Data_Eq.notEq(dictEq)(v)(Data_Monoid.mempty(dictMonoid));
            })(Required.value));
        };
    };
};
var avatarFormat = function (dictMonad) {
    return Formless_Validation.hoistFnE_(dictMonad)((function () {
        var $499 = Data_Either.note(InvalidAvatar.value);
        return function ($500) {
            return $499(Conduit_Data_Avatar.parse($500));
        };
    })());
};
export {
    Required,
    TooShort,
    TooLong,
    InvalidEmail,
    InvalidUsername,
    InvalidAvatar,
    errorToString,
    required,
    minLength,
    maxLength,
    emailFormat,
    usernameFormat,
    avatarFormat,
    cond,
    toOptional
};
