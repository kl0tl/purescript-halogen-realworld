// Generated by purs version 0.13.6
import * as Data_Argonaut_Core from "../Data.Argonaut.Core/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Record from "../Record/index.js";
import * as Type_Data_RowList from "../Type.Data.RowList/index.js";
var GEncodeJson = function (gEncodeJson) {
    this.gEncodeJson = gEncodeJson;
};
var EncodeJson = function (encodeJson) {
    this.encodeJson = encodeJson;
};
var gEncodeJsonNil = new GEncodeJson(function (v) {
    return function (v1) {
        return Foreign_Object.empty;
    };
});
var gEncodeJson = function (dict) {
    return dict.gEncodeJson;
};
var encodeRecord = function (dictGEncodeJson) {
    return function (dictRowToList) {
        return new EncodeJson(function (rec) {
            return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
        });
    };
};
var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
var encodeJson = function (dict) {
    return dict.encodeJson;
};
var encodeJsonArray = function (dictEncodeJson) {
    return new EncodeJson((function () {
        var $1026 = Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson));
        return function ($1027) {
            return Data_Argonaut_Core.fromArray($1026($1027));
        };
    })());
};
var encodeJsonMaybe = function (dictEncodeJson) {
    return new EncodeJson(function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Argonaut_Core.jsonNull;
        };
        if (v instanceof Data_Maybe.Just) {
            return encodeJson(dictEncodeJson)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Class (line 38, column 16 - line 40, column 27): " + [ v.constructor.name ]);
    });
};
var gEncodeJsonCons = function (dictEncodeJson) {
    return function (dictGEncodeJson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return new GEncodeJson(function (row) {
                    return function (v) {
                        return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                    };
                });
            };
        };
    };
};
export {
    encodeJson,
    gEncodeJson,
    EncodeJson,
    GEncodeJson,
    encodeJsonMaybe,
    encodeJsonJString,
    encodeJsonArray,
    encodeRecord,
    gEncodeJsonNil,
    gEncodeJsonCons
};
